{"ast":null,"code":"import _defineProperty from \"/Users/huangdynasty/Desktop/toptop/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/huangdynasty/Desktop/toptop/frontend/src/pages/Carousel.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport Slide from \"../components/Slide\";\nimport Category from \"../slides/Category\";\nimport Price from \"../slides/Price\";\nimport Manufacturers from \"../slides/Manufacturers\";\nimport Features from \"../slides/Features\";\nimport \"../css/common.css\";\nimport \"../css/category.css\";\n/**\n * An array of slide information which include the following:\n * - title: a question to the user regarding the feature\n * - instructions: specifying what the user should choose\n * - options: the Slide that has all the information\n */\n\nconst slides = [{\n  title: \"What are you looking for today?\",\n  instructions: \"Select one or both\",\n  options: Category\n}, {\n  title: \"What's your price range?\",\n  instructions: \"Enter a minimum and/or maximum price\",\n  options: Price\n}, {\n  title: \"What brands do you prefer?\",\n  instructions: \"Select zero, one, or more options\",\n  options: Manufacturers\n}\n/* Ignoring the features selection\n{\n  title: \"What other features are you looking for?\",\n  instructions: \"Enter your desired features in the search bar\",\n  options: Features\n}\n*/\n];\n/**\n * The Carousel page will display the Slides where users will choose\n * different options for their machine. After all the Slides are done, the user\n * will be taken to the Results page with the information stored in this page.\n */\n\nclass Carousel extends Component {\n  /**\n   * Constructs the Carousel page.\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props); // This state will be updated accordingly based on the choices of the user.\n\n    this.updatePayload = (name, value) => {\n      // Set the state with a function, forcing React to queue the change instead\n      // of batching all the changes.\n      this.setState(state => ({\n        payload: _objectSpread({}, state.payload, {\n          [name]: value\n        })\n      }));\n    };\n\n    this.updateArrayInPayload = (name, value) => {\n      // Set the state with a function, forcing React to queue the change instead\n      // of batching all the changes.\n      this.setState(state => {\n        // Get the old array.\n        const oldArray = [...(name === \"manufacturers\" ? state.payload.manufacturers : state.payload.features)]; // Create a new array that either includes or removes the value.\n\n        const newArray = oldArray.includes(value) ? oldArray.filter(i => i !== value) : oldArray.concat([value]); // Update the payload with the new array.\n\n        return {\n          payload: _objectSpread({}, state.payload, {\n            [name]: newArray\n          })\n        };\n      });\n    };\n\n    this.previousSlide = () => {\n      // Get the activeIndex from the state\n      const activeIndex = this.state.activeIndex; // Update the index to be one less\n\n      const index = activeIndex <= 0 ? 0 : activeIndex - 1; // Set the new index\n\n      this.setState({\n        activeIndex: index\n      });\n    };\n\n    this.nextSlide = () => {\n      // Get the activeIndex from the state\n      const activeIndex = this.state.activeIndex; // Get the last index\n\n      const lastIndex = slides.length - 1; // Update the index to be one more\n\n      const index = activeIndex >= lastIndex ? lastIndex : activeIndex + 1; // Set the new index\n\n      this.setState({\n        activeIndex: index\n      });\n    };\n\n    this.goToResults = () => {\n      this.props.history.push(\"/results\", this.state.payload);\n    };\n\n    this.state = {\n      activeIndex: 0,\n      payload: {\n        desktop: false,\n        laptop: false,\n        minPrice: 0,\n        maxPrice: 100000,\n        manufacturers: [],\n        features: []\n      }\n    };\n  }\n  /**\n   * Updates a given field inside the payload.\n   */\n\n\n  /**\n   * Renders the Carousel, which has all the slides that the users will interact\n   * with and choose options from before going to the results.\n   */\n  render() {\n    // Get the index\n    const index = this.state.activeIndex; // Get the slide information\n\n    const _slides$index = slides[index],\n          title = _slides$index.title,\n          instructions = _slides$index.instructions,\n          options = _slides$index.options; // Return the component\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Slide, {\n      title: title,\n      instructions: instructions,\n      options: options,\n      payload: this.state.payload,\n      handler: options === Manufacturers || options === Features ? this.updateArrayInPayload : this.updatePayload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(ProgressBar, {\n      history: this.props.history,\n      count: slides.length,\n      active: index,\n      leftClick: this.previousSlide,\n      rightClick: this.nextSlide,\n      goToResults: this.goToResults,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Carousel;","map":{"version":3,"sources":["/Users/huangdynasty/Desktop/toptop/frontend/src/pages/Carousel.jsx"],"names":["React","Component","ProgressBar","Slide","Category","Price","Manufacturers","Features","slides","title","instructions","options","Carousel","constructor","props","updatePayload","name","value","setState","state","payload","updateArrayInPayload","oldArray","manufacturers","features","newArray","includes","filter","i","concat","previousSlide","activeIndex","index","nextSlide","lastIndex","length","goToResults","history","push","desktop","laptop","minPrice","maxPrice","render"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,OAAO,mBAAP;AACA,OAAO,qBAAP;AAEA;;;;;;;AAMA,MAAMC,MAAM,GAAG,CACb;AACEC,EAAAA,KAAK,EAAE,iCADT;AAEEC,EAAAA,YAAY,EAAE,oBAFhB;AAGEC,EAAAA,OAAO,EAAEP;AAHX,CADa,EAMb;AACEK,EAAAA,KAAK,EAAE,0BADT;AAEEC,EAAAA,YAAY,EAAE,sCAFhB;AAGEC,EAAAA,OAAO,EAAEN;AAHX,CANa,EAWb;AACEI,EAAAA,KAAK,EAAE,4BADT;AAEEC,EAAAA,YAAY,EAAE,mCAFhB;AAGEC,EAAAA,OAAO,EAAEL;AAHX;AAKA;;;;;;;AAhBa,CAAf;AAyBA;;;;;;AAKA,MAAMM,QAAN,SAAuBX,SAAvB,CAAiC;AAC/B;;;;AAIAY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AAHiB,SAoBnBC,aApBmB,GAoBH,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC/B;AACA;AACA,WAAKC,QAAL,CAAcC,KAAK,KAAK;AACtBC,QAAAA,OAAO,oBACFD,KAAK,CAACC,OADJ;AAEL,WAACJ,IAAD,GAAQC;AAFH;AADe,OAAL,CAAnB;AAMD,KA7BkB;;AAAA,SAkCnBI,oBAlCmB,GAkCI,CAACL,IAAD,EAAOC,KAAP,KAAiB;AACtC;AACA;AACA,WAAKC,QAAL,CAAcC,KAAK,IAAI;AACrB;AACA,cAAMG,QAAQ,GAAG,CACf,IAAIN,IAAI,KAAK,eAAT,GACAG,KAAK,CAACC,OAAN,CAAcG,aADd,GAEAJ,KAAK,CAACC,OAAN,CAAcI,QAFlB,CADe,CAAjB,CAFqB,CAQrB;;AACA,cAAMC,QAAQ,GAAGH,QAAQ,CAACI,QAAT,CAAkBT,KAAlB,IACbK,QAAQ,CAACK,MAAT,CAAgBC,CAAC,IAAIA,CAAC,KAAKX,KAA3B,CADa,GAEbK,QAAQ,CAACO,MAAT,CAAgB,CAACZ,KAAD,CAAhB,CAFJ,CATqB,CAarB;;AACA,eAAO;AACLG,UAAAA,OAAO,oBACFD,KAAK,CAACC,OADJ;AAEL,aAACJ,IAAD,GAAQS;AAFH;AADF,SAAP;AAMD,OApBD;AAqBD,KA1DkB;;AAAA,SA+DnBK,aA/DmB,GA+DH,MAAM;AACpB;AADoB,YAEZC,WAFY,GAEI,KAAKZ,KAFT,CAEZY,WAFY,EAIpB;;AACA,YAAMC,KAAK,GAAGD,WAAW,IAAI,CAAf,GAAmB,CAAnB,GAAuBA,WAAW,GAAG,CAAnD,CALoB,CAOpB;;AACA,WAAKb,QAAL,CAAc;AAAEa,QAAAA,WAAW,EAAEC;AAAf,OAAd;AACD,KAxEkB;;AAAA,SA6EnBC,SA7EmB,GA6EP,MAAM;AAChB;AADgB,YAERF,WAFQ,GAEQ,KAAKZ,KAFb,CAERY,WAFQ,EAIhB;;AACA,YAAMG,SAAS,GAAG1B,MAAM,CAAC2B,MAAP,GAAgB,CAAlC,CALgB,CAOhB;;AACA,YAAMH,KAAK,GAAGD,WAAW,IAAIG,SAAf,GAA2BA,SAA3B,GAAuCH,WAAW,GAAG,CAAnE,CARgB,CAUhB;;AACA,WAAKb,QAAL,CAAc;AAAEa,QAAAA,WAAW,EAAEC;AAAf,OAAd;AACD,KAzFkB;;AAAA,SA8FnBI,WA9FmB,GA8FL,MAAM;AAClB,WAAKtB,KAAL,CAAWuB,OAAX,CAAmBC,IAAnB,CAAwB,UAAxB,EAAoC,KAAKnB,KAAL,CAAWC,OAA/C;AACD,KAhGkB;;AAIjB,SAAKD,KAAL,GAAa;AACXY,MAAAA,WAAW,EAAE,CADF;AAEXX,MAAAA,OAAO,EAAE;AACPmB,QAAAA,OAAO,EAAE,KADF;AAEPC,QAAAA,MAAM,EAAE,KAFD;AAGPC,QAAAA,QAAQ,EAAE,CAHH;AAIPC,QAAAA,QAAQ,EAAE,MAJH;AAKPnB,QAAAA,aAAa,EAAE,EALR;AAMPC,QAAAA,QAAQ,EAAE;AANH;AAFE,KAAb;AAWD;AAED;;;;;AAiFA;;;;AAIAmB,EAAAA,MAAM,GAAG;AACP;AACA,UAAMX,KAAK,GAAG,KAAKb,KAAL,CAAWY,WAAzB,CAFO,CAIP;;AAJO,0BAKkCvB,MAAM,CAACwB,KAAD,CALxC;AAAA,UAKCvB,KALD,iBAKCA,KALD;AAAA,UAKQC,YALR,iBAKQA,YALR;AAAA,UAKsBC,OALtB,iBAKsBA,OALtB,EAOP;;AACA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAEF,KADT;AAEE,MAAA,YAAY,EAAEC,YAFhB;AAGE,MAAA,OAAO,EAAEC,OAHX;AAIE,MAAA,OAAO,EAAE,KAAKQ,KAAL,CAAWC,OAJtB;AAKE,MAAA,OAAO,EACLT,OAAO,KAAKL,aAAZ,IAA6BK,OAAO,KAAKJ,QAAzC,GACI,KAAKc,oBADT,GAEI,KAAKN,aARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAYE,oBAAC,WAAD;AACE,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWuB,OADtB;AAEE,MAAA,KAAK,EAAE7B,MAAM,CAAC2B,MAFhB;AAGE,MAAA,MAAM,EAAEH,KAHV;AAIE,MAAA,SAAS,EAAE,KAAKF,aAJlB;AAKE,MAAA,UAAU,EAAE,KAAKG,SALnB;AAME,MAAA,WAAW,EAAE,KAAKG,WANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CADF;AAuBD;;AA1I8B;;AA6IjC,eAAexB,QAAf","sourcesContent":["import React, { Component } from \"react\";\n\nimport ProgressBar from \"../components/ProgressBar\";\nimport Slide from \"../components/Slide\";\n\nimport Category from \"../slides/Category\";\nimport Price from \"../slides/Price\";\nimport Manufacturers from \"../slides/Manufacturers\";\nimport Features from \"../slides/Features\";\n\nimport \"../css/common.css\";\nimport \"../css/category.css\";\n\n/**\n * An array of slide information which include the following:\n * - title: a question to the user regarding the feature\n * - instructions: specifying what the user should choose\n * - options: the Slide that has all the information\n */\nconst slides = [\n  {\n    title: \"What are you looking for today?\",\n    instructions: \"Select one or both\",\n    options: Category\n  },\n  {\n    title: \"What's your price range?\",\n    instructions: \"Enter a minimum and/or maximum price\",\n    options: Price\n  },\n  {\n    title: \"What brands do you prefer?\",\n    instructions: \"Select zero, one, or more options\",\n    options: Manufacturers\n  },\n  /* Ignoring the features selection\n  {\n    title: \"What other features are you looking for?\",\n    instructions: \"Enter your desired features in the search bar\",\n    options: Features\n  }\n  */\n];\n\n/**\n * The Carousel page will display the Slides where users will choose\n * different options for their machine. After all the Slides are done, the user\n * will be taken to the Results page with the information stored in this page.\n */\nclass Carousel extends Component {\n  /**\n   * Constructs the Carousel page.\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    // This state will be updated accordingly based on the choices of the user.\n    this.state = {\n      activeIndex: 0,\n      payload: {\n        desktop: false,\n        laptop: false,\n        minPrice: 0,\n        maxPrice: 100000,\n        manufacturers: [],\n        features: []\n      }\n    };\n  }\n\n  /**\n   * Updates a given field inside the payload.\n   */\n  updatePayload = (name, value) => {\n    // Set the state with a function, forcing React to queue the change instead\n    // of batching all the changes.\n    this.setState(state => ({\n      payload: {\n        ...state.payload,\n        [name]: value\n      }\n    }));\n  };\n\n  /**\n   * Updates a given field inside the payload that is an array.\n   */\n  updateArrayInPayload = (name, value) => {\n    // Set the state with a function, forcing React to queue the change instead\n    // of batching all the changes.\n    this.setState(state => {\n      // Get the old array.\n      const oldArray = [\n        ...(name === \"manufacturers\"\n          ? state.payload.manufacturers\n          : state.payload.features)\n      ];\n      \n      // Create a new array that either includes or removes the value.\n      const newArray = oldArray.includes(value)\n        ? oldArray.filter(i => i !== value)\n        : oldArray.concat([value]);\n\n      // Update the payload with the new array.\n      return {\n        payload: {\n          ...state.payload,\n          [name]: newArray\n        }\n      };\n    });\n  };\n\n  /**\n   * Moves to the previous slide.\n   */\n  previousSlide = () => {\n    // Get the activeIndex from the state\n    const { activeIndex } = this.state;\n\n    // Update the index to be one less\n    const index = activeIndex <= 0 ? 0 : activeIndex - 1;\n\n    // Set the new index\n    this.setState({ activeIndex: index });\n  };\n\n  /**\n   * Moves to the next slide.\n   */\n  nextSlide = () => {\n    // Get the activeIndex from the state\n    const { activeIndex } = this.state;\n\n    // Get the last index\n    const lastIndex = slides.length - 1;\n\n    // Update the index to be one more\n    const index = activeIndex >= lastIndex ? lastIndex : activeIndex + 1;\n\n    // Set the new index\n    this.setState({ activeIndex: index });\n  };\n\n  /**\n   * Sends the user to to the Results page, passing in the payload as the state.\n   */\n  goToResults = () => {\n    this.props.history.push(\"/results\", this.state.payload);\n  };\n\n  /**\n   * Renders the Carousel, which has all the slides that the users will interact\n   * with and choose options from before going to the results.\n   */\n  render() {\n    // Get the index\n    const index = this.state.activeIndex;\n\n    // Get the slide information\n    const { title, instructions, options } = slides[index];\n\n    // Return the component\n    return (\n      <div className=\"container\">\n        <Slide\n          title={title}\n          instructions={instructions}\n          options={options}\n          payload={this.state.payload}\n          handler={\n            options === Manufacturers || options === Features\n              ? this.updateArrayInPayload\n              : this.updatePayload\n          }\n        />\n        <ProgressBar\n          history={this.props.history}\n          count={slides.length}\n          active={index}\n          leftClick={this.previousSlide}\n          rightClick={this.nextSlide}\n          goToResults={this.goToResults}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n"]},"metadata":{},"sourceType":"module"}